From 931015e351fbfb869e02430765c024d32f93ac01 Mon Sep 17 00:00:00 2001
From: Josua Mayer <josua@solid-run.com>
Date: Wed, 10 May 2023 16:33:27 +0300
Subject: [PATCH 7/8] pci: j721e: support optional bus clock

Hardware designs may have two separate clocks for pcie:
One supplying the controller, and one supplying the devices on the bus.

Add support for an optional "pcie_busclk", and enable it at the same
time as "pcie_refclk", if present.

Signed-off-by: Josua Mayer <josua@solid-run.com>
---
 drivers/pci/controller/cadence/pci-j721e.c | 22 ++++++++++++++++++++--
 1 file changed, 20 insertions(+), 2 deletions(-)

diff --git a/drivers/pci/controller/cadence/pci-j721e.c b/drivers/pci/controller/cadence/pci-j721e.c
index 8949f11fed31..c705fb296099 100644
--- a/drivers/pci/controller/cadence/pci-j721e.c
+++ b/drivers/pci/controller/cadence/pci-j721e.c
@@ -70,6 +70,7 @@ enum eoi_reg {
 struct j721e_pcie {
 	struct device		*dev;
 	struct clk		*refclk;
+	struct clk		*busclk;
 	u32			mode;
 	u32			max_lanes;
 	u32			num_lanes;
@@ -646,6 +647,7 @@ static int j721e_pcie_probe(struct platform_device *pdev)
 				dev_err(dev, "Failed to get reset GPIO\n");
 			goto err_get_sync;
 		}
+		gpiod_set_value_cansleep(gpiod, 1);
 
 		ret = cdns_pcie_init_phy(dev, cdns_pcie);
 		if (ret) {
@@ -663,10 +665,24 @@ static int j721e_pcie_probe(struct platform_device *pdev)
 		ret = clk_prepare_enable(clk);
 		if (ret) {
 			dev_err(dev, "failed to enable pcie_refclk\n");
-			goto err_get_sync;
+			goto err_pcie_setup;
 		}
 		pcie->refclk = clk;
 
+		clk = devm_clk_get_optional(dev, "pcie_busclk");
+		if (IS_ERR(clk)) {
+			dev_err(dev, "failed to get pcie_busclk\n");
+			ret = PTR_ERR(clk);
+			goto err_pcie_setup;
+		}
+
+		ret = clk_prepare_enable(clk);
+		if (ret) {
+			dev_err(dev, "failed to enable pcie_busclk\n");
+			goto err_pcie_setup;
+		}
+		pcie->busclk = clk;
+
 		/*
 		 * "Power Sequencing and Reset Signal Timings" table in
 		 * PCI EXPRESS CARD ELECTROMECHANICAL SPECIFICATION, REV. 3.0
@@ -677,12 +693,13 @@ static int j721e_pcie_probe(struct platform_device *pdev)
 		 */
 		if (gpiod) {
 			usleep_range(100, 200);
-			gpiod_set_value_cansleep(gpiod, 1);
+			gpiod_set_value_cansleep(gpiod, 0);
 		}
 
 		ret = cdns_pcie_host_setup(rc);
 		if (ret < 0) {
 			clk_disable_unprepare(pcie->refclk);
+			clk_disable_unprepare(pcie->busclk);
 			goto err_pcie_setup;
 		}
 
@@ -742,6 +759,7 @@ static int j721e_pcie_remove(struct platform_device *pdev)
 		irq_domain_remove(pcie->legacy_irq_domain);
 
 	clk_disable_unprepare(pcie->refclk);
+	clk_disable_unprepare(pcie->busclk);
 	cdns_pcie_disable_phy(cdns_pcie);
 	pm_runtime_put(dev);
 	pm_runtime_disable(dev);
-- 
2.35.3

