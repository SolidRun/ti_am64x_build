From ba0487f8692dd51e2793abc18acf3720066977c5 Mon Sep 17 00:00:00 2001
From: Josua Mayer <josua@solid-run.com>
Date: Tue, 5 Sep 2023 15:41:46 +0200
Subject: [PATCH 13/15] pci: j721e: defer probe until serdes mux is ready

AM64x serdes lane is multi purpose supporting pci-e and usb-3.0.
Hardware designers may place a mux between the serdes lane and the
various connectors for maximum flexibility.
This mux must be configured first before pci-e can function.

Check during probe for a mux named "serdes". If defined, forward error
code to ensure deferral till mux is ready.
In case of -EINVAL (no mux with that name defined), continue as usual.

Signed-off-by: Josua Mayer <josua@solid-run.com>
---
 drivers/pci/controller/cadence/pci-j721e.c | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/drivers/pci/controller/cadence/pci-j721e.c b/drivers/pci/controller/cadence/pci-j721e.c
index c2f342a427f9..0dc33b18cf28 100644
--- a/drivers/pci/controller/cadence/pci-j721e.c
+++ b/drivers/pci/controller/cadence/pci-j721e.c
@@ -14,6 +14,7 @@
 #include <linux/irqdomain.h>
 #include <linux/mfd/syscon.h>
 #include <linux/module.h>
+#include <linux/mux/consumer.h>
 #include <linux/of.h>
 #include <linux/of_device.h>
 #include <linux/of_irq.h>
@@ -541,6 +542,7 @@ static int j721e_pcie_probe(struct platform_device *pdev)
 	u32 mode;
 	int ret;
 	int irq;
+	struct mux_control *mux;
 
 	data = (struct j721e_pcie_data *)of_device_get_match_data(dev);
 	if (!data)
@@ -552,6 +554,11 @@ static int j721e_pcie_probe(struct platform_device *pdev)
 	if (!pcie)
 		return -ENOMEM;
 
+	// ensure mux is ready
+	mux = mux_control_get(dev, "serdes");
+	if (IS_ERR(mux) && PTR_ERR(mux) != -EINVAL)
+		return PTR_ERR(mux);
+
 	pcie->dev = dev;
 	pcie->mode = mode;
 	pcie->is_intc_v1 = data->is_intc_v1;
-- 
2.35.3

