From c4fe3a3b820fa9df6ef580556215a3dda7c44e0b Mon Sep 17 00:00:00 2001
From: Josua Mayer <josua@solid-run.com>
Date: Thu, 18 May 2023 12:31:46 +0300
Subject: [PATCH 27/27] support mac addresses from eeprom TLV data

Signed-off-by: Josua Mayer <josua@solid-run.com>
---
 arch/arm/dts/am642-solidrun-u-boot.dtsi       |  11 +-
 arch/arm/dts/am642-solidrun.dts               |  21 ++
 .../solidrun/am64x_solidrun/am64x_solidrun.c  | 221 +-----------------
 .../solidrun/am64x_solidrun/am64x_solidrun.h  |   1 +
 configs/am64x_a53_solidrun_defconfig          |   4 +
 5 files changed, 46 insertions(+), 212 deletions(-)

diff --git a/arch/arm/dts/am642-solidrun-u-boot.dtsi b/arch/arm/dts/am642-solidrun-u-boot.dtsi
index d066973f89..945d727d6c 100644
--- a/arch/arm/dts/am642-solidrun-u-boot.dtsi
+++ b/arch/arm/dts/am642-solidrun-u-boot.dtsi
@@ -37,8 +37,8 @@
 	main_i2c0_pins_default: main-i2c0-pins-default {
 		u-boot,dm-spl;
 		pinctrl-single,pins = <
-			AM64X_IOPAD(0x0260, PIN_INPUT_PULLUP, 0) /* (A18) I2C0_SCL */
-			AM64X_IOPAD(0x0264, PIN_INPUT_PULLUP, 0) /* (B18) I2C0_SDA */
+			AM64X_IOPAD(0x0260, PIN_INPUT, 0)	/* Pad I2C0_SCL Mux I2C0_SCL */
+			AM64X_IOPAD(0x0264, PIN_INPUT, 0)	/* Pad I2C0_SDA Mux I2C0_SDA */
 		>;
 	};
 };
@@ -48,6 +48,13 @@
 	pinctrl-names = "default";
 	pinctrl-0 = <&main_i2c0_pins_default>;
 	clock-frequency = <400000>;
+
+	som_eeprom: eeprom@50 {
+		status = "okay";
+		compatible = "atmel,24c01a";
+		reg = <0x50>;
+		pagesize = <8>;
+	};
 };
 
 &main_uart0 {
diff --git a/arch/arm/dts/am642-solidrun.dts b/arch/arm/dts/am642-solidrun.dts
index 6370cf603b..90bbfc843d 100644
--- a/arch/arm/dts/am642-solidrun.dts
+++ b/arch/arm/dts/am642-solidrun.dts
@@ -128,6 +128,13 @@
 		>;
 	};
 
+	main_i2c0_pins_default: main-i2c0-pins-default {
+		pinctrl-single,pins = <
+			AM64X_IOPAD(0x0260, PIN_INPUT, 0)	/* Pad I2C0_SCL Mux I2C0_SCL */
+			AM64X_IOPAD(0x0264, PIN_INPUT, 0)	/* Pad I2C0_SDA Mux I2C0_SDA */
+		>;
+	};
+
 	main_i2c1_pins_default: main-i2c1-pins-default {
 		pinctrl-single,pins = <
 			AM64X_IOPAD(0x0268, PIN_INPUT_PULLUP, 0) /* (C18) I2C1_SCL */
@@ -237,6 +244,20 @@
 	status = "disabled";
 };
 
+&main_i2c0 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&main_i2c0_pins_default>;
+	clock-frequency = <400000>;
+	status = "okay";
+
+	som_eeprom: eeprom@50 {
+		status = "okay";
+		compatible = "atmel,24c01a";
+		reg = <0x50>;
+		pagesize = <8>;
+	};
+};
+
 &main_i2c1 {
 	pinctrl-names = "default";
 	pinctrl-0 = <&main_i2c1_pins_default>;
diff --git a/board/solidrun/am64x_solidrun/am64x_solidrun.c b/board/solidrun/am64x_solidrun/am64x_solidrun.c
index a3b9d12312..0a64eaaec6 100644
--- a/board/solidrun/am64x_solidrun/am64x_solidrun.c
+++ b/board/solidrun/am64x_solidrun/am64x_solidrun.c
@@ -331,11 +331,17 @@ int board_phy_config(struct phy_device *phydev)
 	 * - GEN_CTRL = 0x4000
 	 */
 
+	/* configure clk-out */
+	printf("configuring phy clock output ...\n");
+	ret = am64x_sr_phy_write_mmd(phydev, AM64X_SR_PHY_IO_MUX_CFG_REG, 0x0C10);
+	if (ret)
+		return ret;
+
 	/*
 	 * configure delays:
 	 * - enable rx delay: 2ns
 	 * - disable tx delay (MAC has fixed delay)
-	 *
+	 */
 	/*
 	 * ANA_RGMII_DLL_CTRL (reset = 0x77):
 	 * - DLL_TX_DELAY_CTRL_SL: 0b1111 = 0ns
@@ -357,214 +363,6 @@ int board_phy_config(struct phy_device *phydev)
 	return ret;
 }
 
-/*
-reads MAC address from EEPROM, saves mac in output buffer
-Returns 0 if case of success, -1 in case of error.
-output buffer should be an 6 elements array. (caller must check!)
-*/
-int8_t am64xSolidrunReadMacFromEEPROM(u8 addr, u8 *output)
-{
-  struct udevice *bus, *i2c_dev = NULL;
-	int ret;
-	int mac_bytes = 6; /*6 bytes*/
-
-	/*get I2C bus*/
-	ret = uclass_get_device_by_seq(UCLASS_I2C, AM64X_SR_MAC_ADDR_I2C_BUS, &bus);
-
-	/*could not get BUS*/
-	if(ret)
-	{
-		return -1;
-	}
-
-	/*probe bus and check if EEPROM is detected*/
-	ret = dm_i2c_probe(bus, AM64X_SR_MAC_ADDR_I2C_SLAVE, 0, &i2c_dev);
-
-	/*no EEPROM*/
-	if(ret)
-	{
-		return -1;
-	}
-
-	/*read EEPROM*/
-	ret = dm_i2c_read(i2c_dev, addr , output, mac_bytes);
-
-	/*could not read eeprom*/
-	if(ret)
-	{
-		return -1;
-	}
-
-	return 0;
-}
-
-/*
-Increment MAC address by 1
-mac should be an u8 array with 6 elements (caller must check)
-*/
-void am64xSolidrunIncrementMacAddress(u8 *mac)
-{
-	u64 num = 0;
-	u8 i;
-
-	/*convert MAC address to a 64bit number, add 1, then overwrite mac with new value*/
-
-	/*Step 1: convert mac to num*/
-	for(i = 0 ; i < 6 ; i ++ )
-	{
-		num |= ((u64) mac[i] << (8 * (5 - i)));
-	}
-
-	/*Step 2: add 1 to num*/
-	num += 1;
-
-
-	/*Step 3: convert num to mac array*/
-	for(i = 0 ; i < 6 ; i ++ )
-	{
-		mac[i] = (u8)(num >> (8 * (5 - i))) & 0xFF;
-	}
-
-}
-
-
-/*
-print MAC address to stdout
-mac should be an u8 array with 6 elements (caller must check)
-*/
-void am64xSolidrunPrintMacAddress(char *preStr, u8 *mac)
-{
-	u8 i;
-	/*start by printing the preStr (if exist)*/
-	if(preStr != NULL)
-	{
-		printf("%s", preStr);
-	}
-
-	/*now print the MAC address*/
-	for(i = 0 ; i < 6 ; i ++)
-	{
-		printf("%2X", mac[i]);
-
-		/*if this is not the last MAC address segment, add ":"*/
-		if(i != 5)
-		{
-			printf(":");
-		}
-
-	}
-
-	/*print line break*/
-	printf("\n");
-}
-
-
-/*
-save MAC address in environment, macNum is the interface number.
-mac should be an u8 array with 6 elements (caller must check)
-*/
-void am64xSolidrunSaveMacAddress(u8 *mac, u8 macNum)
-{
-	/*
-	environment parameter name is eth${macNum}addr,
-	since this board has 3 MAC addresses, we need just one char allocated for the macNum
-
-	if macNum is 0, eth interface is 0 and environment name should be just "ethaddr"
-	*/
-	char envName[9],
-	/*MAC name is the value saved in environment, which is a string with hex digits and ":" between every 2 chars*/
-	macName[17];
-
-	u8 i,	y = 0;
-
-
-	/*eth inteface is 0, pad the allocated memory with null byte*/
-	if(!macNum)
-	{
-		strcpy(envName, "ethaddr");
-		envName[7] = 0;//NULL Byte
-		envName[8] = 0;//NULL Byte
-	}
-	else
-	{
-		/*set parameter name with interface number*/
-		strcpy(envName, "eth");
-		envName[3] = macNum + '0';
-		strcpy(&envName[4], "addr");
-		envName[8] = 0;//NULL Byte
-	}
-
-
-	for(i = 0 ; i < 6 ; i ++ )
-	{
-		/*
-		convert hex value to string.
-		y keeps track on the next index in macName.
-		every sprintf writes 2 bytes, so y should be increased by 2 after every call
-		*/
-		sprintf(&macName[y], "%x", mac[i]);
-		y += 2;
-
-		/*
-		add the ":" part (if this is not the last iteration!)
-		increase y by 1 after the write action!
-		*/
-		if(i != 5)
-		{
-			macName[y++] = ':';
-		}
-
-	}
-
-	/*set environment parameter*/
-	env_set(envName, macName);
-}
-
-/*function to read MAC addresses from EEPROM and save in environment*/
-void am64xSolidrunSetMacAddresses(void)
-{
-	u8 mac[6],
-	mac_base_addresses[] = {AM64X_SR_MAC_ADDR1_BASE_ADDR, AM64X_SR_MAC_ADDR2_BASE_ADDR, AM64X_SR_MAC_ADDR3_BASE_ADDR},
-	max_interfaces = 3,
-	i;
-
-	/*
-	AM64X can have up to 3 Ethernet interfaces.
-	If an Ethernet interface is assembled, it should have a MAC address in EEPROM.
-	*/
-
-	for(i = 0 ; i < max_interfaces ; i ++)
-	{
-
-		/*read MAC address from EEPROM*/
-		if(am64xSolidrunReadMacFromEEPROM(mac_base_addresses[i], mac) < 0)
-		{
-			/*could not read MAC address*/
-			printf("No MAC address %u in EEPROM, using random MAC address.\n", i+1);
-			continue;
-		}
-
-		/*Check if the read MAC address is a valid one*/
-		if(!is_valid_ethaddr(mac))
-		{
-			printf("No MAC address %u in EEPROM, using random MAC address.\n", i+1);
-			continue;
-		}
-
-		/*
-		Save MAC address
-		The environment variables go as follow:	ethaddr, ethaddr2, ethaddr3, ...
-		The first one has no number, and all others have indexes from, not counting from 0,
-		So we should increate index by 1 if this is not the first MAC address.
-		For the first MAC address, we can send 0, so no number will be added to the environment variable name
-		*/
-		am64xSolidrunSaveMacAddress(mac, i == 0 ? i : i+1);
-		/*print value*/
-		am64xSolidrunPrintMacAddress("MAC Address: ", mac);
-	}
-}
-
-
 
 int8_t initPhys(void)
 {
@@ -640,12 +438,15 @@ int8_t resetSimpleLink(void)
 
 #ifndef	CONFIG_SPL_BUILD
 
+/* from tlv_eeprom.c */
+int mac_read_from_eeprom(void);
+
 int board_late_init(void)
 {
 	int ret;
 
 	/*read Mac Addresses and save in environment*/
-	am64xSolidrunSetMacAddresses();
+	mac_read_from_eeprom();
 
 
 	/*reset SimpleLink MCU*/
diff --git a/board/solidrun/am64x_solidrun/am64x_solidrun.h b/board/solidrun/am64x_solidrun/am64x_solidrun.h
index 999ebd8e64..f2522f43bd 100644
--- a/board/solidrun/am64x_solidrun/am64x_solidrun.h
+++ b/board/solidrun/am64x_solidrun/am64x_solidrun.h
@@ -72,6 +72,7 @@
 #define AM64X_SR_PHY_RGMII_CTRL_REG           0x32
 #define AM64X_SR_PHY_REGCR_REG                0xd
 #define AM64X_SR_PHY_ADDAR_REG                0xe
+#define AM64X_SR_PHY_IO_MUX_CFG_REG           0x86
 
 
 
diff --git a/configs/am64x_a53_solidrun_defconfig b/configs/am64x_a53_solidrun_defconfig
index 7702b07043..7bb0169ad3 100644
--- a/configs/am64x_a53_solidrun_defconfig
+++ b/configs/am64x_a53_solidrun_defconfig
@@ -175,3 +175,7 @@ CONFIG_FS_FAT_MAX_CLUSTSIZE=16384
 CONFIG_OF_LIBFDT_OVERLAY=y
 CONFIG_TI_I2C_BOARD_DETECT=n
 CONFIG_BOOTDELAY=3
+CONFIG_I2C_EEPROM=y
+CONFIG_CMD_TLV_EEPROM=y
+CONFIG_EEPROM_TLV_LIB=y
+CONFIG_CMD_EEPROM=y
-- 
2.35.3

