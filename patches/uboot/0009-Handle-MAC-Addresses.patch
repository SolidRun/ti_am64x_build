From 31acf466e485b293fffeb36922d555e58b69fbf7 Mon Sep 17 00:00:00 2001
From: Alvaro-Karsz <alvaro.karsz@solid-run.com>
Date: Mon, 8 Nov 2021 16:10:48 +0200
Subject: [PATCH 09/16] Handle MAC Addresses

This board has 3 ethernet interfaces, hence, needs 3 MAC addresses.
Only one MAC address is read from EFUSE, second and third MAC addresses are calculated based on the first one.

So this commit adds this functionality, Read first MAC address,
calculate the second and third, and save them as environment variables.
---
 .../solidrun/am64x_solidrun/am64x_solidrun.c  | 193 +++++++++++++++++-
 .../solidrun/am64x_solidrun/am64x_solidrun.h  |  24 +++
 2 files changed, 214 insertions(+), 3 deletions(-)

diff --git a/board/solidrun/am64x_solidrun/am64x_solidrun.c b/board/solidrun/am64x_solidrun/am64x_solidrun.c
index e69fab8145..3ac64fa8d2 100644
--- a/board/solidrun/am64x_solidrun/am64x_solidrun.c
+++ b/board/solidrun/am64x_solidrun/am64x_solidrun.c
@@ -192,7 +192,7 @@ void am64xSolidRunGpioClear(am64x_solidrun_gpio_t *gpio)
 	writel(val, gpio->outDataRegAddr);
 
 	/*write to direction register, '0' -> OUTPUT*/
-        writel(0, gpio->dirRegAddr);
+	writel(0, gpio->dirRegAddr);
 
 }
 
@@ -262,7 +262,7 @@ void am64xSolidRunResetPhy(am64x_solidrun_gpio_t *reset)
 	am64xSolidRunGpioClear(reset);
 	/* select MUX in GPIO */
 	am64xSolidrunSelectGPIO_Function(reset);
-	/* wait 10ms */	
+	/* wait 10ms */
 	mdelay(10);
 	/* set GPIO value as '1' */
 	am64xSolidRunGpioSet(reset);
@@ -276,12 +276,196 @@ int board_phy_config(struct phy_device *phydev)
 	return 0;
 }
 
+/*
+reads MAC address from addr1 and addr2, saves mac in output
+output should be an 6 elements array. (caller must check!)
+*/
+void am64xSolidrunReadMacFromFuse(u32 addr1, u32 addr2, u8 *output)
+{
+	u32 val;
+
+	/*read MAC address first register  -  first 4 digits (first 2 Bytes)*/
+	val = readl(addr1);
+	output[0] = (val >> 8) & 0xFF;
+	output[1] = val & 0xFF;
+
+	/*read MAC address second register  -  last 8 digits (last 4 Bytes)*/
+	val = readl(addr2);
+	output[2] = (val >> 24) & 0xFF;
+	output[3] = (val >> 16) & 0xFF;
+	output[4] = (val >> 8) & 0xFF;
+	output[5] = val & 0xFF;
+}
+
+/*
+Increment MAC address by 1
+mac should be an u8 array with 6 elements (caller must check)
+*/
+void am64xSolidrunIncrementMacAddress(u8 *mac)
+{
+	u64 num = 0;
+	u8 i;
+
+	/*convert MAC address to a 64bit number, add 1, then overwrite mac with new value*/
+
+	/*Step 1: convert mac to num*/
+	for(i = 0 ; i < 6 ; i ++ )
+	{
+		num |= ((u64) mac[i] << (8 * (5 - i)));
+	}
+
+	/*Step 2: add 1 to num*/
+	num += 1;
+
+
+	/*Step 3: convert num to mac array*/
+	for(i = 0 ; i < 6 ; i ++ )
+	{
+		mac[i] = (u8)(num >> (8 * (5 - i))) & 0xFF;
+	}
+
+}
+
+
+/*
+print MAC address to stdout
+mac should be an u8 array with 6 elements (caller must check)
+*/
+void am64xSolidrunPrintMacAddress(char *preStr, u8 *mac)
+{
+	u8 i;
+	/*start by printing the preStr (if exist)*/
+	if(preStr != NULL)
+	{
+		printf("%s", preStr);
+	}
+
+	/*now print the MAC address*/
+	for(i = 0 ; i < 6 ; i ++)
+	{
+		printf("%2X", mac[i]);
+
+		/*if this is not the last MAC address segment, add ":"*/
+		if(i != 5)
+		{
+			printf(":");
+		}
+
+	}
+
+	/*print line break*/
+	printf("\n");
+}
+
+
+/*
+save MAC address in environment, macNum is the interface number.
+mac should be an u8 array with 6 elements (caller must check)
+*/
+void am64xSolidrunSaveMacAddress(u8 *mac, u8 macNum)
+{
+	/*
+	environment parameter name is eth${macNum}addr,
+	since this board has 3 MAC addresses, we need just one char allocated for the macNum
+
+	if macNum is 0, eth interface is 0 and environment name should be just "ethaddr"
+	*/
+	char envName[9],
+	/*MAC name is the value saved in environment, which is a string with hex digits and ":" between every 2 chars*/
+	macName[17];
+
+	u8 i,	y = 0;
+
+
+	/*eth inteface is 0, pad the allocated memory with null byte*/
+	if(!macNum)
+	{
+		strcpy(envName, "ethaddr");
+		envName[7] = 0;//NULL Byte
+		envName[8] = 0;//NULL Byte
+	}
+	else
+	{
+		/*set parameter name with interface number*/
+		strcpy(envName, "eth");
+		envName[3] = macNum + '0';
+		strcpy(&envName[4], "addr");
+		envName[8] = 0;//NULL Byte
+	}
+
+
+	for(i = 0 ; i < 6 ; i ++ )
+	{
+		/*
+		convert hex value to string.
+		y keeps track on the next index in macName.
+		every sprintf writes 2 bytes, so y should be increased by 2 after every call
+		*/
+		sprintf(&macName[y], "%x", mac[i]);
+		y += 2;
+
+		/*
+		add the ":" part (if this is not the last iteration!)
+		increase y by 1 after the write action!
+		*/
+		if(i != 5)
+		{
+			macName[y++] = ':';
+		}
+
+	}
+
+	/*set environment parameter*/
+	env_set(envName, macName);
+}
+
+/*function to read MAC addresses from eFuse and save in environment*/
+void am64xSolidrunSetMacAddresses(void)
+{
+	u8 mac[6], i;
+
+	/*read MAC address from eFuse*/
+	am64xSolidrunReadMacFromFuse(AM64X_SR_MAC_ADDR_0, AM64X_SR_MAC_ADDR_1, mac);
+
+	/*if MAC address read from eFuse is not valid, don't set any environment parameters, net drivers will generate random MAC addresses*/
+	if(!is_valid_ethaddr(mac))
+	{
+		printf("Invalid MAC address read from eFuses, using random MAC address.\n");
+		return;
+	}
+
+	/*
+	This board has 3 Ethernet interfaces, hence, needs 3 MAC addresses
+	The first MAC address is read from eFuses.
+	The second MAC address is equal to first MAC Address + 1
+	The third MAC address is equal to first MAC Address + 2
+	*/
+
+
+	/*save first MAC address in environment and print it*/
+	am64xSolidrunSaveMacAddress(mac, 0);
+	am64xSolidrunPrintMacAddress("First MAC Address: ", mac);
+
+	/*increase MAC address by 1*/
+	am64xSolidrunIncrementMacAddress(mac);
+
+	/*save second MAC address in environment and print it*/
+	am64xSolidrunSaveMacAddress(mac, 2);
+	am64xSolidrunPrintMacAddress("Second MAC Address: ", mac);
+
+	/*increase MAC address by 1*/
+	am64xSolidrunIncrementMacAddress(mac);
+
+	/*save third MAC address in environment and print it*/
+	am64xSolidrunSaveMacAddress(mac, 3);
+	am64xSolidrunPrintMacAddress("Third MAC Address: ", mac);
+}
 
 
 
 int8_t initPhys(void)
 {
-	am64x_solidrun_gpio_t reset1, reset2, reset3, powerDown;
+	am64x_solidrun_gpio_t reset1, reset2, reset3;
 
 	/*build reset gpio structs*/
 
@@ -328,6 +512,9 @@ int8_t initPhys(void)
 
 int board_late_init(void)
 {
+	/*read Mac Addresses and save in environment*/
+	am64xSolidrunSetMacAddresses();
+
 	/*init PHY*/
 	return initPhys();
 
diff --git a/board/solidrun/am64x_solidrun/am64x_solidrun.h b/board/solidrun/am64x_solidrun/am64x_solidrun.h
index 9428bcdc5b..2306270aa2 100644
--- a/board/solidrun/am64x_solidrun/am64x_solidrun.h
+++ b/board/solidrun/am64x_solidrun/am64x_solidrun.h
@@ -52,6 +52,15 @@
 #define AM64X_SR_CORE_VOLTAGE		           0x80000000
 
 
+/*eFuse Addresses*/
+#define AM64X_SR_MAC_ADDR_0                0x43000204
+#define AM64X_SR_MAC_ADDR_1                0x43000200
+
+
+
+
+
+
 #ifdef CONFIG_BOARD_LATE_INIT
 
 
@@ -95,6 +104,21 @@ int8_t initPhys(void);
 
 int board_phy_config(struct phy_device *phydev);
 
+/*function to read MAC addresses from eFuse and save in environment*/
+void am64xSolidrunSetMacAddresses(void);
+
+/*reads mac address from eFuse*/
+void am64xSolidrunReadMacFromFuse(u32 addr1, u32 addr2, u8 *output);
+
+/*save MAC address in environment, macNum is the interface number*/
+void am64xSolidrunSaveMacAddress(u8 *mac, u8 macNum);
+
+/*print MAC address*/
+void am64xSolidrunPrintMacAddress(char *preStr, u8 *mac);
+
+/*Increment MAC address by 1*/
+void am64xSolidrunIncrementMacAddress(u8 *mac);
+
 
 #ifndef	CONFIG_SPL_BUILD
 
-- 
2.35.3

